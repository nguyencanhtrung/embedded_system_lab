reset:
br always >main
nop
hardfault:
reti
nop
memfault:
reti 
nop

.align
	//address
addr_led:		.word 0x000F0000
addr_swt:          	.word 0x000F0004
addr_lcd:		.word 0x000F0008
	//counters
cnt_top_ms:		.word 0x8236					
cnt_top_us:		.word 0x22					
cnt_top_37_us:		.word 0x4D2					
      
	//variables
count_40:		.word 0x000000028                                                                                                                                                             
count_37:		.word 0x00000025		//25
count_520:		.word 0x00000208
count_1000:		.word 0x000007D0

inst_fs:		.word 0x00000701
inst_on_off:		.word 0x00000702
inst_clear:		.word 0x00000703
inst_mode_set:		.word 0x00000704

special_cmd:		.word 0x00000707

char_a:			.word 0x0041

char_s:			.word 0x0053

char_m:			.word 0x004D

char_r:			.word 0x0652
char_r_n:		.word 0x0252
char_o:			.word 0x064F
char_o_n:		.word 0x024F
char_c:			.word 0x0643
char_c_n:		.word 0x0243
char_k:			.word 0x064B
char_k_n:		.word 0x024B
char_space:		.word 0x0610
char_space_n:		.word 0x0210
char_sc:		.word 0x0621
char_sc_n:		.word 0x0221

	//mask

mask	:		.word 0x000007FF

	//leds 
led_data_lower	:	.word 0x0F
led_data_higher	:	.word 0xF0


		
//mask:	.word 0x00007FFF

main:
	//load address
ldr r0,>addr_led	//LCD addr
//ldr r1,>addr_swt	//LCD addr
ldr r2,>addr_lcd

	//load mask

ldr r3,>mask

	//load counters
ldr r10,>cnt_top_ms   //top value for 1 ms delay
//ldr r11,>cnt_top_us   //top value for 1 us delay
ldr r8,>cnt_top_37_us


	// leds 
ldr r4, >led_data_lower
ldr r5, >led_data_higher

ldr r11,>count_1000

	//gp registers

clr r6
clr r7


main_loop:



	st16	r0,r5		//update leds


busy_check_1:	
		clr r6
		ld16 	r6,r2			// get data from slave
		st16	r0,r4			//lower 4 leds on
		cmp eq 	r6,r3			//r6 is for 1us counter!!!
		call	>wait_ms
		br true >busy_check_1
		nop
		nop

	ldr 	r6,>inst_fs	
	st16	r2,r6

busy_check_2:	
		clr r6
		ld16	r6,r2			// get data from slave
		st16	r0,r4			//lower 4 leds on
		cmp eq 	r6,r3			//r6 is for 1us counter!!!
		call	>wait_ms
		br true >busy_check_2
		nop
		nop

	ldr 	r6,>inst_on_off	
	st16	r2,r6

busy_check_3:	clr r6
		ld16 	r6,r2			// get data from slave
		st16	r0,r4			//lower 4 leds on
		cmp eq 	r6,r3			//r6 is for 1us counter!!!
		call	>wait_ms
		br true >busy_check_3
		nop
		nop


	ldr 	r6,>inst_clear
	st16	r2,r6

busy_check_5:	
		clr r6
		ld16 	r6,r2			// get data from slave
		st16	r0,r4			//lower 4 leds on
		cmp eq 	r6,r3			//r6 is for 1us counter!!!
		call	>wait_ms
		br true >busy_check_5
		nop
		nop
	ldr 	r6,>inst_mode_set	
	st16	r2,r6



busy_check_x:	
		clr r6
		ld16 	r6,r2			// get data from slave
		st16	r0,r4			//lower 4 leds on
		cmp eq 	r6,r3			//r6 is for 1us counter!!!
		call	>wait_ms
		br true >busy_check_x
		nop
		nop

	ldr 	r6,>char_s
	st16	r2,r6





	//	initilization done


delay:
	st16	r0,r5		//update leds

busy_check_xxx:	
		clr r6
		ld16 	r6,r2			// get data from slave
		st16	r0,r4			//lower 4 leds on
		cmp eq 	r6,r3			//r6 is for 1us counter!!!
		call	>wait_ms
		br true >busy_check_xxx
		nop
		nop
	ldr 	r6,>special_cmd
	st16	r2,r6
busy_check_xxxx:	
		clr r6
		ld16 	r6,r2			// get data from slave
		st16	r0,r4			//lower 4 leds on
		cmp eq 	r6,r3			//r6 is for 1us counter!!!
		call	>wait_ms
		br true >busy_check_xxxx
		nop
		nop
	//ldr r11,>count_1000
	clr r6

wait_2_s:	call	>wait_ms
		cmp neq r6,r11
		br true >wait_2_s
		addi r6,1
		nop

		clr r6

	st16	r0,r4		//update leds
 
wait_1_s:	call	>wait_ms
		cmp neq r6,r11
		br true >wait_1_s
		addi r6,1
		nop
		clr r6

	st16	r0,r5		//update leds

	br always >delay
	nop





	//subroutine to iterate until counter overflow
wait_ms:
	clr r7				//inititalize inner counter
inc_ms:	cmp neq r7,r10
	br true >inc_ms			//if i=cnt_top
	addi r7,1
	ret				//else
	nop


busy_check:	call	>wait_ms
		clr r6
		ld16 	r6,r2			// get data from slave
		st16	r0,r4			//lower 4 leds on
		cmp eq 	r6,r3			//r6 is for 1us counter!!!
		br true >busy_check
		nop
		ret
		nop	









