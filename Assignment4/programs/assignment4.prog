//	DATA [ 31-24 | 23-16 | 15-8 | 7-0 ]
//	st08 DATA, xx     		=> xx is put on DATA(7-0); cơ chế của lệnh store là sẽ store từ địa chỉ thấp -> cao
//	st16 DATA, xxab			=> xxab is put on DATA(15 - 0)
//	st32 DATA, xxab_cdef	=> xxab_cdef is put on DATA(31 - 0)
//	--------------------
//	ld08 r0, DATA			=> DATA(31-24) is put on r0; cơ chế của lệnh load là sẽ store từ địa chỉ cao -> thấp
//  	ld16 r0, DATA			=> DATA(31-16) is put on r0
//	ld32 r0, DATA			=> DATA(31-0) is put on r0
//  --------------------
//	BIG_ENDIAN representation
//	LSByte (gran = 8)/ LSHalfWord (gran = 16) has highest address
//	=> In assignment 2: they say SW is LSB => it should have highest address in RAM => when interfacing HW it 
//	should be DATA [31-24]
// IRQ TABlE //
reset:
	br always >main
	nop
hardfault:
	br >hardfault_handler
	nop
memfault:
	br >memfault_handler
	nop
irq3:
	br >irq3_handler
	nop
//END IRQ TABLE //

//********** MAIN PROGRAM **********//
//Explanation of used registers 
//*r0 	: 	LED_addr
//*r1	: 	LCD_addr
//*r2	:	SW_BTN_addr
//*r3	:	mask
//*r4	:	
//*r5	:	addr axialmeter     
//*r6	:	addr prevaxialstate 
//*r7	:	value of axialstate (8 bits)
//*r8	:	Value of *prevaxial (8 bits)
//*r9	:	general purpose (delay)
//*r10	:	general purpose
//*r11	:	general purpose (working in interrupt handler)
//--------------
//*r12	:	stack pointer
//*r13	:   link register  -- set by call instruction
//*r14	:	status register (7 downto 2)
//*r15	:	program counter

main:
	

//edited part starts

	ldr r2, >SW_BTN_addr	// load addr of BTN to r2
	ldr r3 ,>mask			// Loading mask to r3

//edited part ends here

	ldr r0, >LED_addr			// giá trị address của LED/ LCD được store vào reg r0 và r1
	
	clr r4
	addi r4, 1
	st08 r0, r4				// Indicator 1
	clr r9
	ldr r9, >delay2s		// load delay value
	call >wait

	ldr sp, >stack_init			// Initialize the stack pointer
	clr sr						// Set runtime priority to zero	
	
	clr r4
	addi r4, 2
	st08 r0, r4				// Indicator 2
	clr r9
	ldr r9, >delay2s		// load delay value
	call >wait
	
								// Assign data memory location to axialmeter and prevaxialstate
	clr r5
	ldr r5, >axialmeter			// load addr of value to r5
	clr r6
	ldr r6, >prevaxialstate		// load addr of state to r6
	
	clr r4
	addi r4, 4
	st08 r0, r4				// Indicator 3
	clr r9
	ldr r9, >delay2s		// load delay value
	call >wait
	
	clr r4 
	ldr r4, >nmi				// Enable interrupt for SW_BTN by software
	//NEED TO CHECK VERY CAREFULLY (endianess)
	st32 r2, r4					// load content of r3 into *r2 ; HW point of view: It will be loaded to data(7 downto 0);
	
								
	clr r4
	addi r4, 8
	st08 r0, r4				// Indicator 4
	clr r9
	ldr r9, >delay2s		// load delay value
	call >wait
	
								// Initialize value for axial and pre-value
	clr r9
	st32 r5, r9					// Initial value of axialmeter is 0x00
	nop
	clr r9
	st32 r6, r9					// Initial value of axialmeter is 0x00
	
	clr r4
	addi r4, 16
	st08 r0, r4				// Indicator 5
	clr r9
	ldr r9, >delay2s		// load delay value
	call >wait
								// DONE INITIALISATION
// Periodically check value of axilmeter, update to LED (period = 40 ms)
//check_axial:
//	clr r4
//	ld08 r4, r5					// load value from data mem *r5 to r4
//	st08 r0, r4					// store new value to LED
	
//	clr r9
//	ldr r9, >delay40ms			// load delay value
//	call >wait
//	br >check_axial
//	nop

// endless loop to stop program

final:
        br >final
        nop

//********** ENDING OF MAIN PROGRAM **********//

// Interrupt Handler
hardfault_handler:
           reti
           nop

memfault_handler:
           reti
		   nop

irq3_handler:
		clr r7				// to be sure everything else is zero
		ld32 r7, r5			// load the value of axialmeter to r7 = axialmeter
		
		ld32 r8, r6			// load prevalue to r8
		ld16 r11, r2			// load content of *r2(sw_btn) to r11;    Content r11:  xxxx|SW| BTN
							// detect the change to know which state of btn are used
		
		and r11, r11, r3		// Extract only BTN part  r11 = r11 and 0x7F   (lay 7 LSbit) // r11 current state of btn: 0000|BTN
		xor r10, r8, r11		// r10 = r6 xor r11; r10 store the change
		st32 r6, r11			// Store current btn state to *r6 = 0000|BTN
		
		clr r3
		addi r3, 0x20
		cmp eq r10, r3			// right shift detected
		br true >right
		nop
		
		clr r3
		addi r3, 0x10
		cmp eq r10, r3			// left shift detected
		br true >left
		nop
		
		clr r3
		addi r3, 0x40
		cmp eq r10, r3			// down detected
		br true >down
		nop
			
		clr r3
		addi r3, 0x08
		cmp eq r10, r3			// up detected
		br true >up
		nop
		
right:		rsh r7,r7, 1				// shift axialmeter to right 1 bit 
		br >end
		nop
left:		lsh r7,r7, 1				// shift axialmeter to left 1 bit 
		br >end
		nop
up:		addi r7, 1				// add value by 1
		br >end
		nop
down:		addi r7, -1				// substract value by 1
		br >end
		nop
end:	
		st32 r5, r7			// write to the data mem the new value
		st32 r0, r7			// write to LED
		reti
		nop
		
wait:
		clr r8
inc:	
		cmp neq r8, r9
		br true >inc
		addi r8, 1
		ret
		nop
//********** END OF SUBROUTINE ********************//
//* Peripheral address declaration */
.align
LED_addr:		.word 0x000F0000
SW_BTN_addr:    	.word 0x000F0004
LCD_addr:		.word 0x000F0008
stack_init:		.word 600

// Need to check
axialmeter:		.word 0x00000401
prevaxialstate:		.word 0x00000657

//* CONSTANT declaration */
delay40ms:		.word 0x145855
delay2s:		.word 0x3F9409A
mask:			.word 0x0000007F
nmi: 			.word 0x00000008
