// Assignment4.prog
// Programmer: Trung Nguyen

//*********** Handling when reseting system and occuring hard/mem faults ***********/
reset:
	br always >main
	nop
hardfault:
	reti
	nop
memfault:
	reti 
	nop
irq_btn:
	br always >irpt_handler
	nop
//*********** Ending of handling      ***********/
//* Peripheral address declaration */
.align
LED_addr:		.word 0x000F0000
SW_BTN_addr:    .word 0x000F0004
LCD_addr:		.word 0x000F0008
jumping_addr:	.word 0x00030006

prio_status_mask	.word 0xFFFFFF03

// Need to check
axialmeter:		.word 0x00000801
prevaxialstate	.word 0x00000802

//* CONSTANT declaration */
enable			.word 0x00080000
disable			.word 0x00000000
delay40ms:		.word 0x145855

//********** END OF DECLARATIONS **************//
//********** MAIN PROGRAM ********************//
//* Explanation of used registers 
//*r0 	: 	LED_addr
//*r1	: 	LCD_addr
//*r2	:	SW_BTN_addr
//*r3	:	Enable Interrupt
//*r4	:	Disable Interrupt
//*r5	:	axialmeter     (8 bits)
//*r6	:	prevaxialstate (8 bits)
//*r7	:
//*r8	:	loop counter
//*r9	:	general purpose
//*r10	:	general purpose
//*r11	:	general purpose (working in interrupt handler)
//*r12	:	stack pointer
//*r13	:   link register  -- set by call instruction
//*r14	:	status register (7 downto 2)
//*r15	:	program counter

main:
	ldr r0, >LED_addr			// giá trị address của LED/ LCD được store vào reg r0 và r1
	ldr r1, >LCD_addr
	ldr r2, >SW_BTN_addr
	ldr r8, >jumping_addr
	
	ld16 r8, 		// load jump instruction (to interrupt handler) into *r8 (address of the first jump of processor)
	ldr r3, >enable
	ldr r4, >disable
	
	// Initialize the stack pointer ?????????????
	
	
	// Assign data memory location to axialmeter and prevaxialstate
	ldr r5, >axialmeter			// load addr of value to r5
	ldr r6, >prevaxialstate		// load addr of state to r6
	// Set runtime priority to zero
	ldr r11, >prio_status_mask	// load mask_priority to r11
	ld32 r10, r14				// load content of *status reg to r10
	and r11, r10, r11			// Clear runtime priority
	st32 r14, r11				// Write back the value to status register
	
	// Enable interrupt for SW_BTN by software
	st32 r2, r3					// load content of r3 into *r2
	
	// DONE INITIALISATION
	// Periodically check value of axilmeter, update to LED (period = 40 ms)
check_axial:
	clr r10
	ld8 r10, r5					// load value from data mem *r5 to r11
	st8 r0, r10					// store new value to LED
	
	clr r9
	ldr r9, >delay40ms			// load delay value
	call wait
	br always >check axial
	nop

	
//********** ENDING OF MAIN PROGRAM **********//

//********** SUBROUTINE **************//

irpt_handler:	
		ldr r5, >axialmeter			// load addr of value to r5
		ldr r6, >prevaxialstate		// load addr of state to r6
		
		ld32 r11, r2				// load content of *r2(sw_btn) to r11;    Content: | SW | BTN | 0x0000
		lsh r11, r11, 8				// Content: BTN | 0x00000000
		st8 r6, r11					// Store current btn state to *r6
		
		xor
		
wait:
		clr r8
inc:	
		cmp neq r8, r9
		br true >inc
		addi r8, 1

		ret
		nop
//********** END OF SUBROUTINE ********************//
